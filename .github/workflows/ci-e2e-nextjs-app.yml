name: CI-e2e-nextjs-app

on:
  push:
    branches: [dev, main]
    # Only consider those paths to trigger the action
    paths:
      - 'apps/nextjs-app/**'
      - 'packages/**'
      - 'package.json'
      - '*.lock'
      - '.yarnrc.yml'
      - '.github/**'

  pull_request:
    types: [opened, synchronize, reopened]
    # Only consider those paths to trigger the action
    paths:
      - 'apps/nextjs-app/**'
      - 'packages/**'
      - 'package.json'
      - '*.lock'
      - '.yarnrc.yml'
      - '.github/**'

jobs:
  e2e:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 18
        database:
          - e2e-postgres
        os:
          - ubuntu-latest
        include:
          - os: ubuntu-latest
            playwright_binary_path: ~/.cache/ms-playwright

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: ‚öôÔ∏è Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: üì• Monorepo install
        uses: ./.github/actions/yarn-nm-install

      # see https://github.com/vercel/next.js/pull/27362
      - name: ‚ôªÔ∏è Restore nextjs build nextjs-app from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/apps/nextjs-app/.next/cache
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo

          key: ${{ runner.os }}-nextjs-app-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('apps/nextjs-app/src/**.[jt]sx?', 'apps/nextjs-app/src/**.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-app-${{ hashFiles('**/yarn.lock') }}-

      - name: üèÅ Start database
        working-directory: packages/db-main-prisma
        run: docker-compose -f docker-compose.e2e.yml up --detach ${{ matrix.database }}

      - name: üå± Create and seed test db schema
        working-directory: packages/db-main-prisma
        run: |
          yarn prisma db push
          yarn prisma db seed
        env:
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public

      - name: üèó Build nextjs-app
        working-directory: apps/nextjs-app
        run: yarn build
        env:
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public
          # Don't need to lint / typecheck for e2e, they're done in another workflow
          NEXTJS_IGNORE_ESLINT: true
          NEXTJS_IGNORE_TYPECHECK: true
          NEXT_DISABLE_SOURCEMAPS: true
          NEXT_TELEMETRY_DISABLED: true
          NEXTJS_SENTRY_UPLOAD_DRY_RUN: true

      - name: üì• Playwright install
        uses: ./.github/actions/playwright-install

      - name: üß™ E2E run nextjs-app playwright tests
        working-directory: apps/nextjs-app
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn test-e2e
        env:
          E2E_WEBSERVER_MODE: BUILD_AND_START
          CI: 1
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nextjs-app-playwright-test-results-${{ runner.os }}
          path: apps/nextjs-app/e2e/.out
