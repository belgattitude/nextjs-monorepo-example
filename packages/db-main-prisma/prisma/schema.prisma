generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/generated/prisma-pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Poem {
  id        Int            @id @default(autoincrement())
  slug      String         @unique
  title     String         @db.VarChar(255)
  content   String         @db.Text
  locale    String?        @db.VarChar(5)
  keywords  PoemKeywords[]
  author    String         @db.VarChar(120)
  link      String?        @db.VarChar(255)
  image     String?        @db.VarChar(255)
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  @@map(name: "poem")
}

model PoemKeywords {
  id        Int      @id @default(autoincrement())
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId    Int      @map(name: "poem_id")
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId Int      @map(name: "keyword_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([poemId, keywordId])
  @@map(name: "poem_keywords")
}

model Keyword {
  id     Int            @id @default(autoincrement())
  name   String         @unique @db.VarChar(120)
  locale String?        @db.VarChar(5)
  poems  PoemKeywords[]

  @@map(name: "keyword")
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String    @db.VarChar(300)
  content     String    @db.Text
  link        String?   @db.VarChar(300)
  image       String?   @db.VarChar(300)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?      @map(name: "author_id")
  publishedAt DateTime? @map(name: "published_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "post")
}

enum UserPermissionRole {
  ADMIN @map("admin")
  USER  @map("user")
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique @db.Text
  firstName     String?            @db.Text
  lastName      String?            @db.Text
  email         String             @unique @db.Text
  emailVerified DateTime?
  role          UserPermissionRole @default(USER)
  password      String?            @db.Text
  avatarUrl     String?            @db.Text
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  sessions      Session[]

  Post Post[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.Text
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String   @db.Text
  token      String   @unique @db.Text
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
